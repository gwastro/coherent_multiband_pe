#!/usr/bin/env python

import h5py
import numpy as np
import pandas as pd
import os, argparse
import pycbc.workflow as wf
import pycbc
import pycbc.workflow.pegasus_workflow as wdax
from pycbc.conversions import chi_eff, chi_a
import configparser


def to_file(path, ifo=None):
    """ Takes a str and returns a pycbc.workflow.pegasus_workflow.File
    instance.
    """
    fil = wdax.File(os.path.basename(path))
    fil.ifo = ifo
    path = os.path.abspath(path)
    fil.add_pfn(path, "local")
    return fil

# command line parser
parser = argparse.ArgumentParser()
parser.add_argument("--population-draw-file")
parser.add_argument("--injection-file-folder")
parser.add_argument("--injection-snr-duration-file")
parser.add_argument("--inference-config")
pycbc.init_logging(True)

# add option groups
wf.add_workflow_command_line_group(parser)
wf.add_workflow_settings_cli(parser)

# parser command line
opts = parser.parse_args()

f = h5py.File(opts.population_draw_file, 'r')
static_params = f.attrs
inj_folder_path = os.path.abspath(opts.injection_file_folder)
inj_snr_duration_path = os.path.abspath(opts.injection_snr_duration_file)

inj_coa_phase_geo = f['coa_phase'][:]
inj_dec = f['dec'][:]
inj_distance = f['distance'][:]
inj_inclination = f['inclination'][:]
inj_mass1 = f['mass1'][:]
inj_mass2 = f['mass2'][:]
inj_polarization_geo = f['polarization_geo'][:]
inj_ra = f['ra'][:]
inj_redshift = f['redshift'][:]
inj_spin1z = f['spin1z'][:]
inj_spin2z = f['spin2z'][:]
inj_tc_geo = f['tc_geo'][:]


cp = configparser.ConfigParser()
cp.read(opts.inference_config)
workflow = wf.Workflow(opts, "3g")

wf.makedir(opts.output_dir)

# construct Executable for running sampler
inference_exe = wf.Executable(workflow.cp, "inference", ifos=workflow.ifos,
                              out_dir=opts.output_dir)

if workflow.cp.has_section('modelstats'):
    stats_exe = wf.Executable(workflow.cp, "modelstats", ifos=workflow.ifos,
                              out_dir=opts.output_dir)

if workflow.cp.has_section('plot'):
    plot_exe = wf.Executable(workflow.cp, "plot", ifos=workflow.ifos,
                             out_dir=opts.output_dir)

infhand = to_file(opts.inference_config)

# loop over number of loudest events to be analyzed
nsnrs = pd.read_csv(inj_snr_duration_path)

for num_event in nsnrs['index']:
    inj_path_3g = inj_folder_path + "/inj_%s_3g.hdf" % num_event
    nessai_output_path_3g = os.path.abspath(opts.output_dir) + "/nessai_output_inj_%s_3g" % num_event
    index_in_results_file = np.where(nsnrs['index']==num_event)[0][0]
    mass1 = inj_mass1[num_event]
    mass2 = inj_mass2[num_event]
    spin1z = inj_spin1z[num_event]
    spin2z = inj_spin2z[num_event]
    spin_eff = chi_eff(mass1, mass2, spin1z, spin2z)
    spin_a = chi_a(mass1, mass2, spin1z, spin2z)
    tc_geo = inj_tc_geo[num_event]
    ra = inj_ra[num_event]
    dec = inj_dec[num_event]
    polarization_geo = inj_polarization_geo[num_event]
    snr_3g = nsnrs['snr_3g'][index_in_results_file]
    duration_ce = int(nsnrs['duration_ce'][index_in_results_file] + 0.5)
    duration_et = int(nsnrs['duration_et'][index_in_results_file] + 0.5)
    mchirp = pycbc.conversions.mchirp_from_mass1_mass2(mass1, mass2)
    # In PyCBC, q >= 1, but in GWTC-3 population results, q <= 1.
    q = pycbc.conversions.q_from_mass1_mass2(mass1, mass2)
    dl = inj_distance[num_event]

    # make individual trig ini files
    path = opts.output_dir + '/specific_prior_inj_%s_3g.ini' % num_event
    fhand = to_file(path)

    # make node for running sampler
    node = inference_exe.create_node()
    node.add_input_list_opt("--config-file", [infhand, fhand])
    inference_file = node.new_output_file_opt(workflow.analysis_time, ".hdf",
                                              "--output-file",
                                              tags=['3g', str(num_event)])
    start_file = inference_file.lfn
    workflow += node

    if workflow.cp.has_section('modelstats'):
        # make node for running sampler
        node = stats_exe.create_node()
        node.add_input_list_opt("--input-file", [inference_file])
        inference_file = node.new_output_file_opt(workflow.analysis_time, ".hdf",
                                                  "--output-file",
                                                  tags=['3g', 'rec', str(num_event)])
        workflow += node
        start_file = inference_file.lfn

    if workflow.cp.has_section('plot'):
        # plot the inference output
        node = plot_exe.create_node()
        node.add_input_opt("--input-file", inference_file)
        plot_file = node.new_output_file_opt(workflow.analysis_time, ".png",
                                             "--output-file",
                                             tags=['3g', str(num_event)])
        workflow += node

    f = open(path, 'w')
    f.write("""
[specific]
injection-file-3g = %s
nessai_output = '%s'

mass1 = %s
mass2 = %s
spin1z = %s
spin2z = %s
tc_geo = %s
ra = %s
dec = %s
polarization_geo = %s
snr_3g_min = %s
snr_3g_max = %s
duration_ce = %s
duration_et = %s

mchirp_min = %s
mchirp_max = %s
q_min = %s
q_max = %s
chi_eff_min = %s
chi_eff_max = %s
chi_a_min = %s
chi_a_max = %s
tc_geo_min = %s
tc_geo_max = %s
dl_min = %s
dl_max = %s
ra_min = %s
ra_max = %s
dec_min = %s
dec_max = %s

start-file = %s
""" % (inj_path_3g, nessai_output_path_3g,
       mass1, mass2, spin1z, spin2z,
       tc_geo, ra, dec, polarization_geo,
       snr_3g - 200 if snr_3g >=200.2 else 0.2, snr_3g + 200,
       duration_ce, duration_et,
       mchirp - 0.1, mchirp + 0.1,
       q - 0.2 if q >= 1.2 else 1, q + 0.2,
       spin_eff - 0.2 if spin_eff - 0.2 >= -1 else -1, spin_eff + 0.2 if spin_eff + 0.2 <= 1 else 1,
       -1, 1,
       tc_geo - 0.0002, tc_geo + 0.0002,
       dl - 100 if dl >= 100.001 else 0.001, dl + 100,
       ra - 0.015, ra + 0.015,
       dec - 0.015, dec + 0.015,
       start_file))
    f.close()
# write dax
workflow.save('3g.dax')
